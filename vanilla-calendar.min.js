/*!
 * Vanilla Calendar v2.8.1 (upraveno pro WGS)
 * (c) 2024 Umal Ghosh / √∫prava: Radek & ChatGPT
 * License: MIT
 */
class VanillaCalendar {
  constructor(selector, options = {}) {
    this.selector = selector;
    this.options = options;
    this.settings = Object.assign(
      {
        lang: "cs",
        selection: { day: "single" },
        visibility: { theme: "light" }
      },
      options.settings || {}
    );
    this.actions = options.actions || {};
    this.init();
  }

  init() {
    const container = document.querySelector(this.selector);
    if (!container) return;

    const today = new Date();
    this.currentMonth = today.getMonth();
    this.currentYear = today.getFullYear();

    container.innerHTML = this.render();
    this.updateDays();
    this.addEventListeners();
  }

  render() {
    return `
    <div class="vanilla-calendar">
      <div class="vanilla-calendar-header">
        <button class="vanilla-calendar-arrow" data-dir="-1">‚Äπ</button>
        <div class="vanilla-calendar-header__content">
          <span class="vanilla-calendar-month"></span>
          <span class="vanilla-calendar-year"></span>
        </div>
        <button class="vanilla-calendar-arrow" data-dir="1">‚Ä∫</button>
      </div>
      <div class="vanilla-calendar-week">
        <span>Po</span><span>√öt</span><span>St</span><span>ƒåt</span><span>P√°</span><span>So</span><span>Ne</span>
      </div>
      <div class="vanilla-calendar-days"></div>
    </div>`;
  }

  updateDays() {
    const container = document.querySelector(this.selector);
    const daysDiv = container.querySelector(".vanilla-calendar-days");

    const firstDay = new Date(this.currentYear, this.currentMonth, 1);
    const startDay = firstDay.getDay() || 7;
    const totalDays = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();

    container.querySelector(".vanilla-calendar-month").textContent =
      firstDay.toLocaleString("cs-CZ", { month: "long" });
    container.querySelector(".vanilla-calendar-year").textContent = this.currentYear;

    daysDiv.innerHTML = "";

    // pr√°zdn√© bu≈àky na zaƒç√°tku mƒõs√≠ce
    for (let i = 1; i < startDay; i++) {
      const empty = document.createElement("div");
      daysDiv.appendChild(empty);
    }

    // generov√°n√≠ dn≈Ø
    for (let day = 1; day <= totalDays; day++) {
      const btn = document.createElement("button");
      btn.textContent = day;
      btn.className = "vanilla-calendar-day__btn";

      const dateStr = `${this.currentYear}-${String(this.currentMonth + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
      btn.dataset.calendarDay = dateStr;

      const today = new Date();
      if (dateStr === today.toISOString().split("T")[0]) {
        btn.classList.add("vanilla-calendar-day__btn_today");
      }

      btn.addEventListener("click", (event) => {
        if (this.actions.clickDay) this.actions.clickDay(event, this);

        // ü©π OPRAVA: d≈ô√≠ve t.querySelectorAll ‚Üí spr√°vnƒõ daysDiv.querySelectorAll
        daysDiv.querySelectorAll(".vanilla-calendar-day__btn_selected")
          .forEach(b => b.classList.remove("vanilla-calendar-day__btn_selected"));

        btn.classList.add("vanilla-calendar-day__btn_selected");
      });

      daysDiv.appendChild(btn);
    }
  }

  addEventListeners() {
    const container = document.querySelector(this.selector);
    container.querySelectorAll(".vanilla-calendar-arrow").forEach((arrow) => {
      arrow.addEventListener("click", () => {
        this.currentMonth += parseInt(arrow.dataset.dir);
        if (this.currentMonth < 0) {
          this.currentMonth = 11;
          this.currentYear--;
        }
        if (this.currentMonth > 11) {
          this.currentMonth = 0;
          this.currentYear++;
        }
        this.updateDays();
      });
    });
  }
}
